from langchain.prompts import ChatPromptTemplate
from langchain_core.messages import AIMessage
from langgraph.graph import END, START, StateGraph, add_messages
from langgraph.prebuilt import ToolNode, create_react_agent, tools_condition
from typing_extensions import Annotated, TypedDict

from llms import llm
from models import Section
from tools import search_engine, wikipedia_tool


class SectionState(TypedDict):
    topic: str
    sections: list[Section]
    messages: Annotated[list, add_messages]


# sections_prompt = ChatPromptTemplate.from_template(
#     """–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑–¥–µ–ª –±–æ–ª—å—à–æ–π —Å—Ç–∞—Ç—å–∏ –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–π —Ç–µ–º–µ:

#     {topic}.

#     –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç—å–∏:
#     {title}

#     –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:
#     {description}

#     –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
#     - search_engine - –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
#     - wikipedia - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ Wikipedia

#     –î–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏.
#     –ö –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–¥–µ–ª—É –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ —Ä–∞–∑–¥–µ–ª–∞.
#     –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç Markdown, –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
#     –°—Å—ã–ª–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ –≤ –≤–∏–¥–µ —Å–Ω–æ—Å–æ–∫ —Ç–∏–ø–∞ '[1]'."""
# )

sections_prompt = ChatPromptTemplate.from_template(
    """–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å **—Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å** —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É:

    {topic}.

    üîπ **–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞**: {title}
    üîπ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏**: {description}

    üìù **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è**:
    - **–ù–µ –ø–∏—à–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–∏–µ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ** ‚Äì —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    - **–ë—É–¥—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –ø–æ –¥–µ–ª—É**, –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ "–≤–æ–¥—É".
    - **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown** (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞, —Ç–∞–±–ª–∏—Ü—ã).
    - **–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞**.
    - **–°—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '[1]').

    üéØ **–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ.**
    """
)


agent = create_react_agent(model=llm, tools=[wikipedia_tool, search_engine])


async def chatbot(state: SectionState):
    section_chain = sections_prompt | agent

    topic = state["topic"]
    sections = [Section.model_validate(section) for section in state["sections"]]

    results = []
    for section in sections:
        result = await section_chain.ainvoke(
            {
                "topic": topic,
                "title": section.section_title,
                "description": section.content,
            }
        )
        for message in result["messages"]:
            if isinstance(message, AIMessage):
                results.append(message)

    return {"sections": [message.content for message in results], "messages": results}


tool_node = ToolNode(tools=[wikipedia_tool, search_engine])

graph_builder = StateGraph(SectionState)
graph_builder.add_node("tools", tool_node)
graph_builder.add_node("chatbot", chatbot)

graph_builder.add_conditional_edges(
    "chatbot",
    tools_condition,
)

graph_builder.add_edge("tools", "chatbot")
graph_builder.add_edge(START, "chatbot")
graph_builder.add_edge("chatbot", END)

graph = graph_builder.compile()


async def sections_graph(state: SectionState):

    return await graph.ainvoke(state)


if __name__ == "__main__":
    import asyncio

    async def main():
        result = await sections_graph(
            {
                "topic": "Python",
                "sections": [
                    Section.model_validate(
                        {
                            "section_title": "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è",
                            "content": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —è–∑—ã–∫–∞.",
                        }
                    ),
                    Section.model_validate(
                        {
                            "section_title": "–¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —è–∑—ã–∫–µ",
                            "content": "–†–∞–∑–≤–∏—Ç–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å. ",
                        }
                    ),
                ],
                "messages": [],
            }
        )

        print(result)

    asyncio.run(main())
