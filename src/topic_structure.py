import asyncio
import uuid

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnableConfig
from langchain_core.runnables import chain as as_runnable
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import END, START, StateGraph, add_messages
from langgraph.types import Command, interrupt
from typing_extensions import Annotated, TypedDict

from llms import think_llm
from models import SectionsList


class OutlineState(TypedDict):
    topic: str
    wishes: Annotated[list[str], add_messages]
    sections: SectionsList


async def generate_outline(state: OutlineState):

    topic = state["topic"]
    wishes = (
        "\n".join([str(item) for item in state["wishes"]])
        if isinstance(state["wishes"], list) and "wishes" in state
        else "no additional wishes"
    )
    prev_sections = (
        "\n".join([str(section) for section in state["sections"]])
        if "sections" in state
        else "no sections"
    )

    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                """
                –í—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî **—Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –ø–æ–¥—Ç–µ–º** –¥–ª—è —Å—Ç–∞—Ç—å–∏.

                –≠—Ç–∞–ø 1: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
                –ü–æ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏ –∏ –µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å), –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –µ–≥–æ —Ç–∏–ø –ø–æ
                —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
                 - –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç—å—è: —à–∏—Ä–æ–∫–∞—è —Ç–µ–º–∞, —Ç—Ä–µ–±—É—é—â–µ–≥–æ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è, –≤–≤–µ–¥–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–º–µ—Ç–Ω—É—é
                 –æ–±–ª–∞—Å—Ç—å, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
                 - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Ç—Ä–µ–±—É—é—â–∏–π –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

                –≠—Ç–∞–ø 2: —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞:

                –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è **–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è**:
                - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∏—á–µ–≥–æ –æ –Ω–µ–π –Ω–µ –∑–Ω–∞–µ—Ç, –ø–æ—ç—Ç–æ–º—É –µ–º—É –Ω—É–∂–Ω—ã —Ç–µ –∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–¥—É—Ç –µ–≥–æ –≤ –∫—É—Ä—Å –¥–µ–ª–∞
                - –°–æ—Å—Ç–∞–≤—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 5-8 –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–µ–º.
                - –ù–∞—á–Ω–∏—Ç–µ —Å –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º.
                - –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Ç–µ–º—ã.
                - –ù–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —É–∑–∫–∏–º —Ç–µ–º–∞–º. –í–∞–∂–Ω–µ–µ –¥–∞—Ç—å –æ–±—â–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –£–∑–∫–∏–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å–∫—Ä–æ–µ—Ç –¥—Ä—É–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º

                –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å **—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π**:
                - –°–æ—Å—Ç–∞–≤—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–¥—Ç–µ–º, –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å.
                - –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö –≤–≤–µ–¥–µ–Ω–∏–π, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞.
                - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –≤–∫–ª—é—á–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.
                - –ù–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–≤–µ–¥–µ–Ω–∏–µ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.

                –≠—Ç–∞–ø 3: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
                –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥—Ç–µ–º—É "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è", –≤–∫–ª—é—á–∞—é—â—É—é:
                - 5-10 —Å–≤—è–∑—ã–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∑–Ω–∞–Ω–∏–π.
                - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
                - –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ—Å—Å—É—Ä—Å—ã (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –∫–Ω–∏–≥–∏, —Ä–µ—Å—É—Ä—Å—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)

                –û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
                üîπ –£–¥–∞–ª–∏—Ç–µ –ø–æ–¥—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–º–∏.
                üîπ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ –ø–æ–¥—Ç–µ–º—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã–Ω—ã–µ –≤ –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                üîπ –ù–ï –¥—É–±–ª–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å.
                üîπ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –∏—Ö —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–ª–∞–≤–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–ª–∏ —Ç–µ–º—É.
                üîπ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–µ–º—ã –∏ –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –≤ —ç—Ç–æ–π –ø–æ–¥—Ç–µ–º–µ.
                –≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å —ç—Ç—É —á–∞—Å—Ç—å —Å—Ç–∞—Ç—å–∏.
                üîπ –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –ø–æ–¥—Ç–µ–º—ã
                (–Ω–µ –º–µ–Ω–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) - –ø–æ —ç—Ç–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Å—Ç–∞—Ç—å—è –¥—Ä—É–≥–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º.
                üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é.


                **–¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏:** {topic}
                **–ü—Ä–æ—à–ª—ã–µ –ø–æ–¥—Ç–µ–º—ã:** {sections}
                **–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {wishes}
                """,
            ),
            ("user", "–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º."),
        ]
    )

    generate_outline_chain = prompt | think_llm.with_structured_output(SectionsList)

    sections = await generate_outline_chain.ainvoke(
        {"topic": topic, "sections": prev_sections, "wishes": wishes}
    )

    return {"sections": sections, "wishes": state["wishes"]}


async def display_sections(state: OutlineState):

    sections = SectionsList.model_validate(state["sections"]).sections

    print("\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–µ–º:")
    for i, section in enumerate(sections, start=1):
        print(f"[{i}] {section.section_title.capitalize()}:\n\t{section.content}")

    return state


async def process_user_feedback(state: OutlineState):

    user_feedback: str = interrupt(
        {
            "wishes": state["wishes"],
            "messages": "–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Ç–µ–º—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'done': ",
        }
    )

    if user_feedback.lower() == "done":
        return Command(update={"wishes": state["wishes"]}, goto=END)

    new_wishes = (
        state["wishes"] + [user_feedback]
        if user_feedback not in state["wishes"]
        else state["wishes"]
    )

    return Command(
        update={"wishes": new_wishes},
        goto="generate_outline",
    )


async def finalize_outline(state: OutlineState):
    print("\nFinal node and finished values:")
    for i, section in enumerate(state["sections"].sections, start=1):
        print(f"[{i}] {section.section_title}\n\t{section.content}")

    return Command(goto=END)


def get_graph():
    graph_builder = StateGraph(OutlineState)

    graph_builder.add_node("generate_outline", generate_outline)
    graph_builder.add_node("display_sections", display_sections)
    graph_builder.add_node("process_user_feedback", process_user_feedback)
    graph_builder.add_node("finalize_outline", finalize_outline)

    graph_builder.add_edge(START, "generate_outline")
    graph_builder.add_edge("generate_outline", "display_sections")
    graph_builder.add_edge("display_sections", "process_user_feedback")

    graph_builder.set_finish_point("finalize_outline")

    checkpointer = MemorySaver()

    return graph_builder.compile(checkpointer=checkpointer)


@as_runnable
async def content_generator(state: OutlineState):
    config = RunnableConfig(configurable={"thread_id": uuid.uuid4()})

    graph = get_graph()

    async for chunk in graph.astream(
        {"topic": state["topic"], "wishes": state["wishes"]}, config
    ):
        for node_id, _ in chunk.items():
            if node_id == "__interrupt__":
                while True:
                    user_feedback = await asyncio.get_event_loop().run_in_executor(
                        None, input, ">>> –î–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: "
                    )
                    await graph.ainvoke(Command(resume=user_feedback), config)

                    if user_feedback.lower() == "done":
                        break

    return graph.get_state(config).values["sections"]


if __name__ == "__main__":
    import os

    async def main():
        config = RunnableConfig(configurable={"thread_id": uuid.uuid4()})
        topic = await asyncio.get_event_loop().run_in_executor(
            None, input, "> –¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏: "
        )
        wishes = await asyncio.get_event_loop().run_in_executor(
            None, input, "> –ü–æ–∂–µ–ª–∞–Ω–∏—è: "
        )

        result = await content_generator.ainvoke(
            input={"topic": topic, "wishes": wishes}, config=config  # type: ignore
        )

        os.system("clear")
        print(result)

    asyncio.run(main())
